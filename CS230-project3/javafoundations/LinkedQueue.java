/** Joe Canero. Project 3. CSC 230 4/7/12	This is the LinkedQueue class for my project 3.*///********************************************************************//  LinkedQueue.java       Java Foundations////  Represents a linked implementation of a queue.//********************************************************************package javafoundations;import javafoundations.exceptions.*;public class LinkedQueue<T> implements Queue<T>{   private int count;   private LinearNode<T> front, rear;   public LinkedQueue()   {      count = 0;      front = rear = null;   }   public void enqueue (T element)   {      LinearNode<T> node = new LinearNode<T>(element);      if (isEmpty())         front = node;      else         rear.setNext (node);      rear = node;      count++;   }      public T dequeue() throws EmptyCollectionException   {      if (isEmpty())         throw new EmptyCollectionException ("the queue contains no elements");      T result = front.getElement();      front = front.getNext();      count--;      if (isEmpty())         rear = null;      return result;   }   public T first() throws EmptyCollectionException   {      if (isEmpty())         throw new EmptyCollectionException ("the queue contains no elements");       return front.getElement();   }   public boolean isEmpty()   {      boolean empty = false;            if(count == 0)      	empty = true;      return empty;   }    public int size()   {      return count;   }   public String toString()   {      String result = "";      LinearNode<T> current = front;      result += "Front of Queue:\n";      while (current != null)      {         result += result + (current.getElement()).toString() + "\n";         current = current.getNext();      }      result += "Back of Queue:\n";      return result;   }}